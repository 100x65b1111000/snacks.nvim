*snacks-debug.txt*           For Neovim          Last change: 2024 November 06

==============================================================================
Table of Contents                             *snacks-debug-table-of-contents*

1. Module                                                |snacks-debug-module|
  - Snacks.debug()                        |snacks-debug-module-snacks.debug()|
  - Snacks.debug.backtrace()    |snacks-debug-module-snacks.debug.backtrace()|
  - Snacks.debug.inspect()        |snacks-debug-module-snacks.debug.inspect()|
  - Snacks.debug.profile()        |snacks-debug-module-snacks.debug.profile()|
Utility functions you can use in your code.

Personally, I have the code below at the top of my `init.lua`

>lua
    _G.dd = function(...)
      Snacks.debug.inspect(...)
    end
    _G.bt = function()
      Snacks.debug.backtrace()
    end
    vim.print = _G.dd
<

Whatthis does:

- Add a global `dd(...)` you can use anywhere to quickly show a
    notification with a pretty printed dump of the object(s)
    with lua treesitter highlighting
- Add a global `bt()` to show a notification with a pretty
    backtrace.
- Override Neovimâ€™s `vim.print`, which is also used by `:= {something = 123}`


==============================================================================
1. Module                                                *snacks-debug-module*


SNACKS.DEBUG()                            *snacks-debug-module-snacks.debug()*

>lua
    ---@type fun(...)
    Snacks.debug()
<


SNACKS.DEBUG.BACKTRACE()        *snacks-debug-module-snacks.debug.backtrace()*

Show a notification with a pretty backtrace

>lua
    Snacks.debug.backtrace()
<


SNACKS.DEBUG.INSPECT()            *snacks-debug-module-snacks.debug.inspect()*

Show a notification with a pretty printed dump of the object(s) with lua
treesitter highlighting and the location of the caller

>lua
    Snacks.debug.inspect(...)
<


SNACKS.DEBUG.PROFILE()            *snacks-debug-module-snacks.debug.profile()*

Very simple function to profile a lua function. **flush**set to `true` to use
`jit.flush` in every iteration. **count**defaults to 100

>lua
    ---@param fn fun()
    ---@param opts? {count?: number, flush?: boolean}
    Snacks.debug.profile(fn, opts)
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
