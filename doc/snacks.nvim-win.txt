*snacks.nvim-win.txt*         For Neovim         Last change: 2024 November 05

==============================================================================
Table of Contents                          *snacks.nvim-win-table-of-contents*

1. win                                                   |snacks.nvim-win-win|
  - Config                                        |snacks.nvim-win-win-config|
  - Types                                          |snacks.nvim-win-win-types|
  - Module                                        |snacks.nvim-win-win-module|

==============================================================================
1. win                                                   *snacks.nvim-win-win*


CONFIG                                            *snacks.nvim-win-win-config*

>lua
    ---@class snacks.win.Config
    ---@field view? string merges with config from `Snacks.config.views[view]`
    ---@field position? "float"|"bottom"|"top"|"left"|"right"
    ---@field buf? number
    ---@field file? string
    ---@field enter? boolean
    ---@field backdrop? number|false
    ---@field win? vim.api.keyset.win_config
    ---@field wo? vim.wo
    ---@field bo? vim.bo
    ---@field keys? table<string, false|string|fun(self: snacks.win)|snacks.win.Keys>
    ---@field on_buf? fun(self: snacks.win)
    ---@field on_win? fun(self: snacks.win)
    {
      position = "float",
      win = {
        relative = "editor",
        style = "minimal",
      },
      wo = {
        winhighlight = "Normal:NormalFloat,NormalNC:NormalFloat",
      },
      bo = {},
      keys = {
        q = "close",
      },
    }
<


TYPES                                              *snacks.nvim-win-win-types*

>lua
    ---@class snacks.win.Keys: vim.api.keyset.keymap
    ---@field [1]? string
    ---@field [2]? string|fun(self: snacks.win): any
    ---@field mode? string|string[]
<


MODULE                                            *snacks.nvim-win-win-module*

>lua
    ---@class snacks.win
    ---@field id number
    ---@field buf? number
    ---@field win? number
    ---@field opts snacks.win.Config
    ---@field augroup? number
    ---@field backdrop? snacks.win
    Snacks.win = {}
<


SNACKS.WIN() ~

>lua
    ---@type fun(opts? :snacks.win.Config): snacks.win
    Snacks.win()
<


SNACKS.WIN.NEW() ~

>lua
    ---@param opts? snacks.win.Config | { show?: boolean }
    ---@return snacks.win
    Snacks.win.new(opts)
<


SNACKS.WIN.RESOLVE() ~

>lua
    ---@param opts? snacks.win.Config
    ---@return snacks.win.Config
    Snacks.win.resolve(opts)
<


WIN:BUF_VALID() ~

>lua
    win:buf_valid()
<


WIN:CLOSE() ~

>lua
    ---@param opts? { buf: boolean }
    win:close(opts)
<


WIN:HIDE() ~

>lua
    win:hide()
<


WIN:IS_FLOATING() ~

>lua
    win:is_floating()
<


WIN:SHOW() ~

>lua
    win:show()
<


WIN:SIZE() ~

>lua
    ---@return { height: number, width: number }
    win:size()
<


WIN:TOGGLE() ~

>lua
    win:toggle()
<


WIN:UPDATE() ~

>lua
    win:update()
<


WIN:VALID() ~

>lua
    win:valid()
<


WIN:WIN_VALID() ~

>lua
    win:win_valid()
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
