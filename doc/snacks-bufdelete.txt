*snacks-bufdelete.txt*                                             snacks.nvim

==============================================================================
Table of Contents                         *snacks-bufdelete-table-of-contents*

1. Config                                            |snacks-bufdelete-config|
2. Module                                            |snacks-bufdelete-module|
  - Snacks.bufdelete()            |snacks-bufdelete-module-snacks.bufdelete()|
  - Snacks.bufdelete.all()    |snacks-bufdelete-module-snacks.bufdelete.all()|
  - Snacks.bufdelete.delete()|snacks-bufdelete-module-snacks.bufdelete.delete()|
  - Snacks.bufdelete.other()|snacks-bufdelete-module-snacks.bufdelete.other()|
Delete buffers without disrupting window layout.

If the buffer you want to close has changes, a prompt will be shown to save or
discard.


==============================================================================
1. Config                                            *snacks-bufdelete-config*

>lua
    ---@class snacks.bufdelete.Opts
    ---@field buf? number Buffer to delete. If not provided, the current buffer is deleted
    ---@field force? boolean Delete the buffer even if it is modified
    ---@field filter? fun(buf: number): boolean Filter buffers to delete
    ---@field wipe? boolean Wipe the buffer instead of deleting it (see `:h :bwipeout`)
    {}
<


==============================================================================
2. Module                                            *snacks-bufdelete-module*


SNACKS.BUFDELETE()                *snacks-bufdelete-module-snacks.bufdelete()*

>lua
    ---@type fun(buf?: number)
    Snacks.bufdelete()
<


SNACKS.BUFDELETE.ALL()        *snacks-bufdelete-module-snacks.bufdelete.all()*

Delete all buffers

>lua
    Snacks.bufdelete.all()
<


SNACKS.BUFDELETE.DELETE()  *snacks-bufdelete-module-snacks.bufdelete.delete()*

Delete a buffer: - either the current buffer if `buf` is not provided - or the
buffer `buf` if it is a number - or every buffer for which `buf` returns true
if it is a function

>lua
    ---@param buf? number | fun(buf: number): boolean
    Snacks.bufdelete.delete(buf)
<


SNACKS.BUFDELETE.OTHER()    *snacks-bufdelete-module-snacks.bufdelete.other()*

Delete all buffers except the current one

>lua
    Snacks.bufdelete.other()
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
