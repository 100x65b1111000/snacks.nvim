*snacks.nvim.txt*           For Neovim           Last change: 2024 November 05

==============================================================================
Table of Contents                              *snacks.nvim-table-of-contents*

1. snacks.nvim                                       |snacks.nvim-snacks.nvim|
  - Requirements                        |snacks.nvim-snacks.nvim-requirements|
  - Installation                        |snacks.nvim-snacks.nvim-installation|
  - Configuration                      |snacks.nvim-snacks.nvim-configuration|
  - Snacks                                    |snacks.nvim-snacks.nvim-snacks|

==============================================================================
1. snacks.nvim                                       *snacks.nvim-snacks.nvim*

A collection of small QoL plugins for Neovim.


  [!CAUTION] Do **NOT** use this for now, it’s still in development.

REQUIREMENTS                            *snacks.nvim-snacks.nvim-requirements*

- **Neovim** >= 0.9.4
- for proper icons support:
    - mini.icons <https://github.com/echasnovski/mini.icons> _(optional)_
    - nvim-web-devicons <https://github.com/nvim-tree/nvim-web-devicons> _(optional)_
    - a Nerd Font <https://www.nerdfonts.com/> **(optional)**


INSTALLATION                            *snacks.nvim-snacks.nvim-installation*

Install the plugin with your package manager:


LAZY.NVIM ~


  [!important] A couple of plugins **require** `snacks.nvim` to be set-up early.
  Setup only sets up some autocmds and does not load any plugins. Check the code
  <https://github.com/folke/snacks.nvim/blob/main/lua/snacks/init.lua> to see
  exactly what is being set up.

  [!tip] If you don’t need these plugins, you can disable them, or skip `setup`
  alltogether.
>lua
    {
      "folke/snacks.nvim",
      priority = 1000,
      lazy = false,
      opts = {
        -- your configuration comes here
        -- or leave it empty to use the default settings
        -- refer to the configuration section below
      },
      keys = {
        {
          "<leader>?",
          function()
            require("which-key").show({ global = false })
          end,
          desc = "Buffer Local Keymaps (which-key)",
        },
      },
    }
<


CONFIGURATION                          *snacks.nvim-snacks.nvim-configuration*

Please refer to the readme of each plugin for their specific configuration.

Default Options ~

>lua
    ---@class snacks.Config
    ---@field bigfile? snacks.bigfile.Config | { enabled: boolean }
    ---@field gitbrowse? snacks.gitbrowse.Config
    ---@field lazygit? snacks.lazygit.Config
    ---@field notifier? snacks.notifier.Config | { enabled: boolean }
    ---@field quickfile? { enabled: boolean }
    ---@field statuscolumn? snacks.statuscolumn.Config  | { enabled: boolean }
    ---@field terminal? snacks.terminal.Config
    ---@field toggle? snacks.toggle.Config
    ---@field views? table<string, snacks.win.Config>
    ---@field win? snacks.win.Config
    ---@field words? snacks.words.Config
    {
      views = {},
      bigfile = { enabled = true },
      notifier = { enabled = true },
      quickfile = { enabled = true },
      statuscolumn = { enabled = true },
      words = { enabled = true },
    }
<


SNACKS                                        *snacks.nvim-snacks.nvim-snacks*

  -----------------------------------------------------------------------
  Module                   Description              Readme
  ------------------------ ------------------------ ---------------------
  bigfile                  Deal with big files      README

  bufdelete                Delete buffers without   README
                           disrupting window layout 

  debug                    Pretty inspect &         README
                           backtraces for debugging 

  git                      Useful tools for Git     README

  gitbrowse                Open the repo of the     README
                           active file in the       
                           browser (e.g., GitHub)   

  lazygit                  Open LazyGit in a float, README
                           auto-configure           
                           colorscheme and          
                           integration with Neovim  

  notify                   Small wrapper around     README
                           Neovim’s vim.notify      

  notifier                 Better vim.notify        README

  quickfile                Render a file as quickly README
                           as possible before       
                           loading all plugins      
                           (progressive rendering)  

  rename                   LSP-integrated renaming  README
                           with support for plugins 
                           like neo-tree,           
                           nvim-tree, oil,          
                           mini.files               

  statuscolumn             Customizable             README
                           statuscolumn             

  terminal                 Create and toggle        README
                           floating/sp. Uses float. 

  toggle                   Toggle keymaps           README
                           integrated with          
                           which-key icons / colors 

  win                      Easily create and manage README
                           floating windows or      
                           splits                   

  words                    Auto-show LSP            README
                           references, auto-show    
                           and quick navigation     
                           between them             
  -----------------------------------------------------------------------

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
