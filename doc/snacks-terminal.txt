*snacks-terminal.txt*         For Neovim         Last change: 2024 November 06

==============================================================================
Table of Contents                          *snacks-terminal-table-of-contents*

1. Config                                             |snacks-terminal-config|
2. Styles                                             |snacks-terminal-styles|
  - terminal                                 |snacks-terminal-styles-terminal|
3. Module                                             |snacks-terminal-module|
  - Snacks.terminal()               |snacks-terminal-module-snacks.terminal()|
  - Snacks.terminal.open()     |snacks-terminal-module-snacks.terminal.open()|
  - Snacks.terminal.toggle() |snacks-terminal-module-snacks.terminal.toggle()|

==============================================================================
1. Config                                             *snacks-terminal-config*

>lua
    ---@class snacks.terminal.Config
    ---@field cwd? string
    ---@field env? table<string, string>
    ---@field win? snacks.win.Config
    ---@field interactive? boolean
    ---@field override? fun(cmd?: string|string[], opts?: snacks.terminal.Config) Use this to use a different terminal implementation
    {
      win = { style = "terminal" },
    }
<


==============================================================================
2. Styles                                             *snacks-terminal-styles*


TERMINAL                                     *snacks-terminal-styles-terminal*

>lua
    {
      bo = {
        filetype = "snacks_terminal",
      },
      wo = {},
      keys = {
        gf = function(self)
          local f = vim.fn.findfile(vim.fn.expand("<cfile>"))
          if f == "" then
            Snacks.notify.warn("No file under cursor")
          else
            self:close()
            vim.cmd("e " .. f)
          end
        end,
        term_normal = {
          "<esc>",
          function(self)
            self.esc_timer = self.esc_timer or (vim.uv or vim.loop).new_timer()
            if self.esc_timer:is_active() then
              self.esc_timer:stop()
              vim.cmd("stopinsert")
            else
              self.esc_timer:start(200, 0, function() end)
              return "<esc>"
            end
          end,
          mode = "t",
          expr = true,
          desc = "Double escape to normal mode",
        },
      },
    }
<


==============================================================================
3. Module                                             *snacks-terminal-module*

>lua
    ---@class snacks.terminal: snacks.win
    ---@field cmd? string | string[]
    ---@field opts snacks.terminal.Config
    Snacks.terminal = {}
<


SNACKS.TERMINAL()                   *snacks-terminal-module-snacks.terminal()*

>lua
    ---@type fun(cmd?: string|string[], opts?: snacks.terminal.Config): snacks.terminal
    Snacks.terminal()
<


SNACKS.TERMINAL.OPEN()         *snacks-terminal-module-snacks.terminal.open()*

>lua
    ---@param cmd? string | string[]
    ---@param opts? snacks.terminal.Config
    Snacks.terminal.open(cmd, opts)
<


SNACKS.TERMINAL.TOGGLE()     *snacks-terminal-module-snacks.terminal.toggle()*

>lua
    ---@param cmd? string | string[]
    ---@param opts? snacks.terminal.Config
    Snacks.terminal.toggle(cmd, opts)
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
